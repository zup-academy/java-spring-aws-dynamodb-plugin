name: java-spring-aws-dynamodb-plugin
description: Plugin to enable Spring Data AWS DynamoDB in Spring Boot Java applications
display-name: java-spring-aws-dynamodb-plugin
picture: plugin.png
category: backend # Ref: https://docs.stackspot.com/latest/docs/creators-guide/yaml/#category
compatibility:
  - java
  - spring
about: docs/pt-br/doc.md
usage: docs/pt-br/doc.md
use-case: docs/pt-br/doc.md
implementation: docs/pt-br/doc.md
technologies: # Ref: https://docs.stackspot.com/latest/docs/creators-guide/yaml/#technologies
  - "Api"
types:
  - app

hooks:
  ##
  # Parses pom.xml and create some "computed" inputs
  ##
  - type: run-script
    trigger: before-input
    script: scripts/open-pom.py

  ##
  # Edit pom.xml
  ##
  - type: edit
    path: pom.xml
    trigger: after-render    
    changes:
      - search:
          string: "</dependencies>"
          insert-before:
            snippet: snippets/snippet-pom.xml
          when:
            not-exists-snippet: snippets/snippet-pom.xml
      - search:
          string: "</dependencies>"
          insert-after:
            snippet: snippets/snippet-pom-dependencyManagement.xml
          when:
            not-exists-snippet: snippets/snippet-pom-dependencyManagement.xml

  ##
  # Edit application.yaml
  ##
  - type: edit
    path: src/main/resources/application.yaml
    trigger: after-render    
    changes:
      - search:
          string: "spring:"
          insert-after:
            snippet: snippets/snippet-application.yaml
          when:
            not-exists: "dynamodb:"

  ##
  # Edit application.yaml: Application Configuration for DynamoDB
  ##
  - type: edit
    path: src/main/resources/application.yaml
    trigger: after-render 
    changes:
      - insert:
          line: -1
          snippet: snippets/snippet-application-dynamodb-config.yaml
          when:
            not-exists-snippet: snippets/snippet-application-dynamodb-config.yaml   
  
  ##
  # Edit application-test.yaml
  ##
  - type: edit
    path: src/test/resources/application-test.yaml
    trigger: after-render    
    changes:
      - search:
          string: "spring:"
          insert-after:
            snippet: snippets/snippet-application-test.yaml
          when:
            not-exists: "dynamodb:"

  ##
  # Create or edit docker-compose.yaml
  ##
  - type: render-templates
    trigger: after-render
    path: snippets/docker-localstack

  ##
  # Spring Boot Application class
  ##
  - type: edit
    path: "{{application_class_source_file_path}}"
    trigger: after-render
    changes:
      - search:
          string: "import org.springframework.boot.SpringApplication;"
          insert-before:
            value: |
              import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
              import org.springframework.context.annotation.FilterType;
              import org.socialsignin.spring.data.dynamodb.repository.EnableScan;
              import static org.springframework.context.annotation.ComponentScan.Filter;
               
      - search:
          string: "@SpringBootApplication"
          insert-before:
            value: |
              /**
               * Ignores DynamoDB Repositories when scanning for JPA Repositories
               * 
               * IMPORTANT: if you don't use Spring Data JPA you can remove this code, or, 
               *            if necessary, you can adapt it to your project.
               */
              @EnableJpaRepositories(excludeFilters = {
                  @Filter(type = FilterType.ANNOTATION, classes = { EnableScan.class })
              })
              